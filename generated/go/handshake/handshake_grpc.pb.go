// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package handshake

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HandshakeClient is the client API for Handshake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandshakeClient interface {
	// Handshake
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
	Connect(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Ack, error)
	// Encrypted RPCs
	UnarySecret(ctx context.Context, in *SecretMessage, opts ...grpc.CallOption) (*SecretMessage, error)
	StreamSecret(ctx context.Context, in *SecretMessage, opts ...grpc.CallOption) (Handshake_StreamSecretClient, error)
}

type handshakeClient struct {
	cc grpc.ClientConnInterface
}

func NewHandshakeClient(cc grpc.ClientConnInterface) HandshakeClient {
	return &handshakeClient{cc}
}

var handshakeInfoStreamDesc = &grpc.StreamDesc{
	StreamName: "Info",
}

func (c *handshakeClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := c.cc.Invoke(ctx, "/Handshake/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var handshakeConnectStreamDesc = &grpc.StreamDesc{
	StreamName: "Connect",
}

func (c *handshakeClient) Connect(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/Handshake/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var handshakeUnarySecretStreamDesc = &grpc.StreamDesc{
	StreamName: "UnarySecret",
}

func (c *handshakeClient) UnarySecret(ctx context.Context, in *SecretMessage, opts ...grpc.CallOption) (*SecretMessage, error) {
	out := new(SecretMessage)
	err := c.cc.Invoke(ctx, "/Handshake/UnarySecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var handshakeStreamSecretStreamDesc = &grpc.StreamDesc{
	StreamName:    "StreamSecret",
	ServerStreams: true,
}

func (c *handshakeClient) StreamSecret(ctx context.Context, in *SecretMessage, opts ...grpc.CallOption) (Handshake_StreamSecretClient, error) {
	stream, err := c.cc.NewStream(ctx, handshakeStreamSecretStreamDesc, "/Handshake/StreamSecret", opts...)
	if err != nil {
		return nil, err
	}
	x := &handshakeStreamSecretClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Handshake_StreamSecretClient interface {
	Recv() (*SecretMessage, error)
	grpc.ClientStream
}

type handshakeStreamSecretClient struct {
	grpc.ClientStream
}

func (x *handshakeStreamSecretClient) Recv() (*SecretMessage, error) {
	m := new(SecretMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HandshakeService is the service API for Handshake service.
// Fields should be assigned to their respective handler implementations only before
// RegisterHandshakeService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type HandshakeService struct {
	// Handshake
	Info    func(context.Context, *InfoRequest) (*InfoReply, error)
	Connect func(context.Context, *Init) (*Ack, error)
	// Encrypted RPCs
	UnarySecret  func(context.Context, *SecretMessage) (*SecretMessage, error)
	StreamSecret func(*SecretMessage, Handshake_StreamSecretServer) error
}

func (s *HandshakeService) info(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Handshake/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *HandshakeService) connect(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Init)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Handshake/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Connect(ctx, req.(*Init))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *HandshakeService) unarySecret(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UnarySecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/Handshake/UnarySecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UnarySecret(ctx, req.(*SecretMessage))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *HandshakeService) streamSecret(_ interface{}, stream grpc.ServerStream) error {
	m := new(SecretMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.StreamSecret(m, &handshakeStreamSecretServer{stream})
}

type Handshake_StreamSecretServer interface {
	Send(*SecretMessage) error
	grpc.ServerStream
}

type handshakeStreamSecretServer struct {
	grpc.ServerStream
}

func (x *handshakeStreamSecretServer) Send(m *SecretMessage) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterHandshakeService registers a service implementation with a gRPC server.
func RegisterHandshakeService(s grpc.ServiceRegistrar, srv *HandshakeService) {
	srvCopy := *srv
	if srvCopy.Info == nil {
		srvCopy.Info = func(context.Context, *InfoRequest) (*InfoReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
		}
	}
	if srvCopy.Connect == nil {
		srvCopy.Connect = func(context.Context, *Init) (*Ack, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
		}
	}
	if srvCopy.UnarySecret == nil {
		srvCopy.UnarySecret = func(context.Context, *SecretMessage) (*SecretMessage, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UnarySecret not implemented")
		}
	}
	if srvCopy.StreamSecret == nil {
		srvCopy.StreamSecret = func(*SecretMessage, Handshake_StreamSecretServer) error {
			return status.Errorf(codes.Unimplemented, "method StreamSecret not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "Handshake",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Info",
				Handler:    srvCopy.info,
			},
			{
				MethodName: "Connect",
				Handler:    srvCopy.connect,
			},
			{
				MethodName: "UnarySecret",
				Handler:    srvCopy.unarySecret,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "StreamSecret",
				Handler:       srvCopy.streamSecret,
				ServerStreams: true,
			},
		},
		Metadata: "handshake.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewHandshakeService creates a new HandshakeService containing the
// implemented methods of the Handshake service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewHandshakeService(s interface{}) *HandshakeService {
	ns := &HandshakeService{}
	if h, ok := s.(interface {
		Info(context.Context, *InfoRequest) (*InfoReply, error)
	}); ok {
		ns.Info = h.Info
	}
	if h, ok := s.(interface {
		Connect(context.Context, *Init) (*Ack, error)
	}); ok {
		ns.Connect = h.Connect
	}
	if h, ok := s.(interface {
		UnarySecret(context.Context, *SecretMessage) (*SecretMessage, error)
	}); ok {
		ns.UnarySecret = h.UnarySecret
	}
	if h, ok := s.(interface {
		StreamSecret(*SecretMessage, Handshake_StreamSecretServer) error
	}); ok {
		ns.StreamSecret = h.StreamSecret
	}
	return ns
}

// UnstableHandshakeService is the service API for Handshake service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableHandshakeService interface {
	// Handshake
	Info(context.Context, *InfoRequest) (*InfoReply, error)
	Connect(context.Context, *Init) (*Ack, error)
	// Encrypted RPCs
	UnarySecret(context.Context, *SecretMessage) (*SecretMessage, error)
	StreamSecret(*SecretMessage, Handshake_StreamSecretServer) error
}
