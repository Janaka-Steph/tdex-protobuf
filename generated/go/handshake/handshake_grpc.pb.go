// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package handshake

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HandshakeClient is the client API for Handshake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandshakeClient interface {
	// Handshake
	Connect(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Ack, error)
	// Encrypted RPCs
	UnarySecret(ctx context.Context, in *SecretMessage, opts ...grpc.CallOption) (*SecretMessage, error)
	StreamSecret(ctx context.Context, in *SecretMessage, opts ...grpc.CallOption) (Handshake_StreamSecretClient, error)
}

type handshakeClient struct {
	cc grpc.ClientConnInterface
}

func NewHandshakeClient(cc grpc.ClientConnInterface) HandshakeClient {
	return &handshakeClient{cc}
}

func (c *handshakeClient) Connect(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/Handshake/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handshakeClient) UnarySecret(ctx context.Context, in *SecretMessage, opts ...grpc.CallOption) (*SecretMessage, error) {
	out := new(SecretMessage)
	err := c.cc.Invoke(ctx, "/Handshake/UnarySecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handshakeClient) StreamSecret(ctx context.Context, in *SecretMessage, opts ...grpc.CallOption) (Handshake_StreamSecretClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Handshake_serviceDesc.Streams[0], "/Handshake/StreamSecret", opts...)
	if err != nil {
		return nil, err
	}
	x := &handshakeStreamSecretClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Handshake_StreamSecretClient interface {
	Recv() (*SecretMessage, error)
	grpc.ClientStream
}

type handshakeStreamSecretClient struct {
	grpc.ClientStream
}

func (x *handshakeStreamSecretClient) Recv() (*SecretMessage, error) {
	m := new(SecretMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HandshakeServer is the server API for Handshake service.
// All implementations must embed UnimplementedHandshakeServer
// for forward compatibility
type HandshakeServer interface {
	// Handshake
	Connect(context.Context, *Init) (*Ack, error)
	// Encrypted RPCs
	UnarySecret(context.Context, *SecretMessage) (*SecretMessage, error)
	StreamSecret(*SecretMessage, Handshake_StreamSecretServer) error
	mustEmbedUnimplementedHandshakeServer()
}

// UnimplementedHandshakeServer must be embedded to have forward compatible implementations.
type UnimplementedHandshakeServer struct {
}

func (*UnimplementedHandshakeServer) Connect(context.Context, *Init) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedHandshakeServer) UnarySecret(context.Context, *SecretMessage) (*SecretMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnarySecret not implemented")
}
func (*UnimplementedHandshakeServer) StreamSecret(*SecretMessage, Handshake_StreamSecretServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSecret not implemented")
}
func (*UnimplementedHandshakeServer) mustEmbedUnimplementedHandshakeServer() {}

func RegisterHandshakeServer(s *grpc.Server, srv HandshakeServer) {
	s.RegisterService(&_Handshake_serviceDesc, srv)
}

func _Handshake_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Init)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandshakeServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Handshake/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandshakeServer).Connect(ctx, req.(*Init))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handshake_UnarySecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandshakeServer).UnarySecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Handshake/UnarySecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandshakeServer).UnarySecret(ctx, req.(*SecretMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handshake_StreamSecret_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecretMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HandshakeServer).StreamSecret(m, &handshakeStreamSecretServer{stream})
}

type Handshake_StreamSecretServer interface {
	Send(*SecretMessage) error
	grpc.ServerStream
}

type handshakeStreamSecretServer struct {
	grpc.ServerStream
}

func (x *handshakeStreamSecretServer) Send(m *SecretMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Handshake_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Handshake",
	HandlerType: (*HandshakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Handshake_Connect_Handler,
		},
		{
			MethodName: "UnarySecret",
			Handler:    _Handshake_UnarySecret_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSecret",
			Handler:       _Handshake_StreamSecret_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "handshake.proto",
}
