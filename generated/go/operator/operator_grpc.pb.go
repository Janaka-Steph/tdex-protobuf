// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package operator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OperatorClient is the client API for Operator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorClient interface {
	// Returns a new derived address for the given market.
	// If market field is empty, a new Market is created and MUST be initialized.
	DepositAddress(ctx context.Context, in *DepositAddressRequest, opts ...grpc.CallOption) (*DepositAddressReply, error)
	// Returns the list of previously generated addresses for the given market.
	ListDepositAddress(ctx context.Context, in *ListDepositAddressRequest, opts ...grpc.CallOption) (*ListDepositAddressReply, error)
	// Returns a new derived address from the fee account.
	// This is only used to deposit some LBTC to subsidize blockchain fees.
	FeeDepositAddress(ctx context.Context, in *FeeDepositAddressRequest, opts ...grpc.CallOption) (*FeeDepositAddressReply, error)
	// Returns the aggregated balance of LBTC held in the fee account.
	FeeBalance(ctx context.Context, in *FeeBalanceRequest, opts ...grpc.CallOption) (*FeeBalanceReply, error)
	// Makes the given market tradable
	OpenMarket(ctx context.Context, in *OpenMarketRequest, opts ...grpc.CallOption) (*OpenMarketReply, error)
	// Makes the given market NOT tradabale
	CloseMarket(ctx context.Context, in *CloseMarketRequest, opts ...grpc.CallOption) (*CloseMarketReply, error)
	// Changes the fee for the given market.
	// The Market MUST be closed before doing this change.
	UpdateFee(ctx context.Context, in *UpdateFeeRequest, opts ...grpc.CallOption) (*UpdateFeeReply, error)
}

type operatorClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorClient(cc grpc.ClientConnInterface) OperatorClient {
	return &operatorClient{cc}
}

func (c *operatorClient) DepositAddress(ctx context.Context, in *DepositAddressRequest, opts ...grpc.CallOption) (*DepositAddressReply, error) {
	out := new(DepositAddressReply)
	err := c.cc.Invoke(ctx, "/Operator/DepositAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListDepositAddress(ctx context.Context, in *ListDepositAddressRequest, opts ...grpc.CallOption) (*ListDepositAddressReply, error) {
	out := new(ListDepositAddressReply)
	err := c.cc.Invoke(ctx, "/Operator/ListDepositAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) FeeDepositAddress(ctx context.Context, in *FeeDepositAddressRequest, opts ...grpc.CallOption) (*FeeDepositAddressReply, error) {
	out := new(FeeDepositAddressReply)
	err := c.cc.Invoke(ctx, "/Operator/FeeDepositAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) FeeBalance(ctx context.Context, in *FeeBalanceRequest, opts ...grpc.CallOption) (*FeeBalanceReply, error) {
	out := new(FeeBalanceReply)
	err := c.cc.Invoke(ctx, "/Operator/FeeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) OpenMarket(ctx context.Context, in *OpenMarketRequest, opts ...grpc.CallOption) (*OpenMarketReply, error) {
	out := new(OpenMarketReply)
	err := c.cc.Invoke(ctx, "/Operator/OpenMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) CloseMarket(ctx context.Context, in *CloseMarketRequest, opts ...grpc.CallOption) (*CloseMarketReply, error) {
	out := new(CloseMarketReply)
	err := c.cc.Invoke(ctx, "/Operator/CloseMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) UpdateFee(ctx context.Context, in *UpdateFeeRequest, opts ...grpc.CallOption) (*UpdateFeeReply, error) {
	out := new(UpdateFeeReply)
	err := c.cc.Invoke(ctx, "/Operator/UpdateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServer is the server API for Operator service.
// All implementations must embed UnimplementedOperatorServer
// for forward compatibility
type OperatorServer interface {
	// Returns a new derived address for the given market.
	// If market field is empty, a new Market is created and MUST be initialized.
	DepositAddress(context.Context, *DepositAddressRequest) (*DepositAddressReply, error)
	// Returns the list of previously generated addresses for the given market.
	ListDepositAddress(context.Context, *ListDepositAddressRequest) (*ListDepositAddressReply, error)
	// Returns a new derived address from the fee account.
	// This is only used to deposit some LBTC to subsidize blockchain fees.
	FeeDepositAddress(context.Context, *FeeDepositAddressRequest) (*FeeDepositAddressReply, error)
	// Returns the aggregated balance of LBTC held in the fee account.
	FeeBalance(context.Context, *FeeBalanceRequest) (*FeeBalanceReply, error)
	// Makes the given market tradable
	OpenMarket(context.Context, *OpenMarketRequest) (*OpenMarketReply, error)
	// Makes the given market NOT tradabale
	CloseMarket(context.Context, *CloseMarketRequest) (*CloseMarketReply, error)
	// Changes the fee for the given market.
	// The Market MUST be closed before doing this change.
	UpdateFee(context.Context, *UpdateFeeRequest) (*UpdateFeeReply, error)
	mustEmbedUnimplementedOperatorServer()
}

// UnimplementedOperatorServer must be embedded to have forward compatible implementations.
type UnimplementedOperatorServer struct {
}

func (*UnimplementedOperatorServer) DepositAddress(context.Context, *DepositAddressRequest) (*DepositAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAddress not implemented")
}
func (*UnimplementedOperatorServer) ListDepositAddress(context.Context, *ListDepositAddressRequest) (*ListDepositAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositAddress not implemented")
}
func (*UnimplementedOperatorServer) FeeDepositAddress(context.Context, *FeeDepositAddressRequest) (*FeeDepositAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDepositAddress not implemented")
}
func (*UnimplementedOperatorServer) FeeBalance(context.Context, *FeeBalanceRequest) (*FeeBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeBalance not implemented")
}
func (*UnimplementedOperatorServer) OpenMarket(context.Context, *OpenMarketRequest) (*OpenMarketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenMarket not implemented")
}
func (*UnimplementedOperatorServer) CloseMarket(context.Context, *CloseMarketRequest) (*CloseMarketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseMarket not implemented")
}
func (*UnimplementedOperatorServer) UpdateFee(context.Context, *UpdateFeeRequest) (*UpdateFeeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFee not implemented")
}
func (*UnimplementedOperatorServer) mustEmbedUnimplementedOperatorServer() {}

func RegisterOperatorServer(s *grpc.Server, srv OperatorServer) {
	s.RegisterService(&_Operator_serviceDesc, srv)
}

func _Operator_DepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).DepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operator/DepositAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).DepositAddress(ctx, req.(*DepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operator/ListDepositAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListDepositAddress(ctx, req.(*ListDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_FeeDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).FeeDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operator/FeeDepositAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).FeeDepositAddress(ctx, req.(*FeeDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_FeeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).FeeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operator/FeeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).FeeBalance(ctx, req.(*FeeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_OpenMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).OpenMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operator/OpenMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).OpenMarket(ctx, req.(*OpenMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_CloseMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).CloseMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operator/CloseMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).CloseMarket(ctx, req.(*CloseMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_UpdateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).UpdateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operator/UpdateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).UpdateFee(ctx, req.(*UpdateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Operator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Operator",
	HandlerType: (*OperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepositAddress",
			Handler:    _Operator_DepositAddress_Handler,
		},
		{
			MethodName: "ListDepositAddress",
			Handler:    _Operator_ListDepositAddress_Handler,
		},
		{
			MethodName: "FeeDepositAddress",
			Handler:    _Operator_FeeDepositAddress_Handler,
		},
		{
			MethodName: "FeeBalance",
			Handler:    _Operator_FeeBalance_Handler,
		},
		{
			MethodName: "OpenMarket",
			Handler:    _Operator_OpenMarket_Handler,
		},
		{
			MethodName: "CloseMarket",
			Handler:    _Operator_CloseMarket_Handler,
		},
		{
			MethodName: "UpdateFee",
			Handler:    _Operator_UpdateFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operator.proto",
}
